use log::{error, info};
use serde::{Deserialize, Serialize};
use std::{default, fs};

const CONFIG_PATH: &str = "config.toml";
const CONFIG_TEMPLATE_PATH: &str = "config_template.toml";

#[derive(Serialize, Deserialize, Debug)]
pub struct HidDevice {
    pub keyboard_path: String,
    pub rela_mouse_path: String,
    pub abs_mouse_path: String,
}

impl Default for HidDevice {
    fn default() -> Self {
        Self {
            keyboard_path: "keyboard_path".to_string(),
            rela_mouse_path: "rela_mouse_path".to_string(),
            abs_mouse_path: "abs_mouse_path".to_string(),
        }
    }
}


#[derive(Serialize, Deserialize, Debug)]
pub struct HidMouseSetting {
    pub x_speed: f32,
    pub y_speed: f32,
    pub x_screen_range: i32,
    pub y_screen_range: i32,
    pub x_hid_range: i32,
    pub y_hid_range: i32,
}

impl Default for HidMouseSetting {
    fn default() -> Self {
        Self {
            x_speed: 1.0,
            y_speed: 1.0,
            x_screen_range: 1920,
            y_screen_range: 1080,
            x_hid_range: 32000,
            y_hid_range: 32000,
        }
    }
}


#[derive(Serialize, Deserialize, Debug)]
pub struct BtInputDevice {
    pub mouse_path: String,
}

impl Default for BtInputDevice {
    fn default() -> Self {
        Self {
            mouse_path: "mouse_path".to_string(),
        }
    }
}


#[derive(Serialize, Deserialize, Debug)]
pub struct MouseSetting {
    pub x_speed: f32,      // Mouse X Speed
    pub y_speed: f32,      // Mouse Y Speed
    pub x_range: i32,      // Mouse Movable Range, Equal to Screen Pixel Count
    pub y_range: i32,      // Mouse Movable Range, Equal to Screen Pixel Count
}


impl Default for MouseSetting {
    fn default() -> Self {
        Self {
            x_speed: 1.0,
            y_speed: 1.0,
            x_range: 1920,
            y_range: 1080,
        }
    }
}


#[derive(Serialize, Deserialize, Debug, Default)]
pub struct Config {
    pub debug: i8,
    pub hid_device: HidDevice,
    pub hid_mouse_setting: HidMouseSetting,
    pub bt_input_device: BtInputDevice,
    pub mouse_setting: MouseSetting,
}

pub fn load() -> Result<Config, Box<dyn std::error::Error>> {
    if !fs::metadata(CONFIG_PATH).is_ok() {
        error!("The config.toml file does not exist!");
        error!("A config_template.toml will be generated by this program.");
        error!("Please complete the template and rename it accordingly.");

        let cfg = Config::default();
        let cfg = toml::to_string(&cfg)?;
        match fs::write(CONFIG_TEMPLATE_PATH, cfg) {
            Ok(_) => {},
            Err(_) => {error!("config_template.toml generate Error!");}
        };
        return Err(Box::new(std::io::Error::new(
            std::io::ErrorKind::NotFound,
            "Config file not found",
        )));
    }

    let config_content = match fs::read_to_string(CONFIG_PATH) {
        Ok(content) => content,
        Err(e) => {
            error!("Error reading the config file: {}", e);
            return Err(Box::new(e));
        }
    };

    let cfg: Config = match toml::from_str(&config_content) {
        Ok(config) => config,
        Err(e) => {
            error!("Error parsing the config file: {}", e);
            return Err(Box::new(e));
        }
    };
    Ok(cfg)
}
